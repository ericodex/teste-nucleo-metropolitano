/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { JwtResponse as ComGestaoprodutosDtoResponseJwtResponse } from '../models/com/gestaoprodutos/dto/response/jwt-response';
import { Usuario as ComGestaoprodutosModelEntityUsuario } from '../models/com/gestaoprodutos/model/entity/usuario';
import { listAllUsers } from '../fn/autenticacao/list-all-users';
import { ListAllUsers$Params } from '../fn/autenticacao/list-all-users';
import { login } from '../fn/autenticacao/login';
import { Login$Params } from '../fn/autenticacao/login';
import { register } from '../fn/autenticacao/register';
import { Register$Params } from '../fn/autenticacao/register';


/**
 * Endpoints para autenticação e registro de usuários
 */
@Injectable({ providedIn: 'root' })
export class AutenticacaoService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `register()` */
  static readonly RegisterPath = '/v1/auth/register';

  /**
   * Registrar novo usuário.
   *
   * Cria uma nova conta de usuário (role USER por padrão)
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `register()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  register$Response(params: Register$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return register(this.http, this.rootUrl, params, context);
  }

  /**
   * Registrar novo usuário.
   *
   * Cria uma nova conta de usuário (role USER por padrão)
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `register$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  register(params: Register$Params, context?: HttpContext): Observable<number> {
    return this.register$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `login()` */
  static readonly LoginPath = '/v1/auth/login';

  /**
   * Autenticar usuário.
   *
   * Realiza login e retorna um token JWT válido
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `login()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  login$Response(params: Login$Params, context?: HttpContext): Observable<StrictHttpResponse<ComGestaoprodutosDtoResponseJwtResponse>> {
    return login(this.http, this.rootUrl, params, context);
  }

  /**
   * Autenticar usuário.
   *
   * Realiza login e retorna um token JWT válido
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `login$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  login(params: Login$Params, context?: HttpContext): Observable<ComGestaoprodutosDtoResponseJwtResponse> {
    return this.login$Response(params, context).pipe(
      map((r: StrictHttpResponse<ComGestaoprodutosDtoResponseJwtResponse>): ComGestaoprodutosDtoResponseJwtResponse => r.body)
    );
  }

  /** Path part for operation `listAllUsers()` */
  static readonly ListAllUsersPath = '/v1/auth/list';

  /**
   * Listar todos os usuários (exige token JWT e role ADMIN).
   *
   * Retorna uma lista de todos os usuários cadastrados. Acesso restrito apenas a usuários com a role ADMIN.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `listAllUsers()` instead.
   *
   * This method doesn't expect any request body.
   */
  listAllUsers$Response(params?: ListAllUsers$Params, context?: HttpContext): Observable<StrictHttpResponse<ComGestaoprodutosModelEntityUsuario>> {
    return listAllUsers(this.http, this.rootUrl, params, context);
  }

  /**
   * Listar todos os usuários (exige token JWT e role ADMIN).
   *
   * Retorna uma lista de todos os usuários cadastrados. Acesso restrito apenas a usuários com a role ADMIN.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `listAllUsers$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  listAllUsers(params?: ListAllUsers$Params, context?: HttpContext): Observable<ComGestaoprodutosModelEntityUsuario> {
    return this.listAllUsers$Response(params, context).pipe(
      map((r: StrictHttpResponse<ComGestaoprodutosModelEntityUsuario>): ComGestaoprodutosModelEntityUsuario => r.body)
    );
  }

}
