/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { atualizarProduto } from '../fn/produtos/atualizar-produto';
import { AtualizarProduto$Params } from '../fn/produtos/atualizar-produto';
import { buscarPorId } from '../fn/produtos/buscar-por-id';
import { BuscarPorId$Params } from '../fn/produtos/buscar-por-id';
import { ProdutoDto as ComGestaoprodutosDtoProdutoDto } from '../models/com/gestaoprodutos/dto/produto-dto';
import { criarProduto } from '../fn/produtos/criar-produto';
import { CriarProduto$Params } from '../fn/produtos/criar-produto';
import { excluirProduto } from '../fn/produtos/excluir-produto';
import { ExcluirProduto$Params } from '../fn/produtos/excluir-produto';
import { listarTodos } from '../fn/produtos/listar-todos';
import { ListarTodos$Params } from '../fn/produtos/listar-todos';
import { ProdutoDto as OrgSpringframeworkDataDomainPageComGestaoprodutosDtoProdutoDto } from '../models/org/springframework/data/domain/PageCom/gestaoprodutos/dto/produto-dto';


/**
 * Operações para gerenciamento de produtos
 */
@Injectable({ providedIn: 'root' })
export class ProdutosService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `buscarPorId()` */
  static readonly BuscarPorIdPath = '/v1/produtos/{id}';

  /**
   * Buscar produto por ID (disponível para USER e ADMIN).
   *
   * Retorna um único produto com base no ID fornecido. Requer autenticação JWT e role USER ou ADMIN.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `buscarPorId()` instead.
   *
   * This method doesn't expect any request body.
   */
  buscarPorId$Response(params: BuscarPorId$Params, context?: HttpContext): Observable<StrictHttpResponse<ComGestaoprodutosDtoProdutoDto>> {
    return buscarPorId(this.http, this.rootUrl, params, context);
  }

  /**
   * Buscar produto por ID (disponível para USER e ADMIN).
   *
   * Retorna um único produto com base no ID fornecido. Requer autenticação JWT e role USER ou ADMIN.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `buscarPorId$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  buscarPorId(params: BuscarPorId$Params, context?: HttpContext): Observable<ComGestaoprodutosDtoProdutoDto> {
    return this.buscarPorId$Response(params, context).pipe(
      map((r: StrictHttpResponse<ComGestaoprodutosDtoProdutoDto>): ComGestaoprodutosDtoProdutoDto => r.body)
    );
  }

  /** Path part for operation `atualizarProduto()` */
  static readonly AtualizarProdutoPath = '/v1/produtos/{id}';

  /**
   * Atualizar produto (exige role ADMIN).
   *
   * Atualiza os dados de um produto existente. Requer autenticação JWT e role ADMIN.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `atualizarProduto()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  atualizarProduto$Response(params: AtualizarProduto$Params, context?: HttpContext): Observable<StrictHttpResponse<ComGestaoprodutosDtoProdutoDto>> {
    return atualizarProduto(this.http, this.rootUrl, params, context);
  }

  /**
   * Atualizar produto (exige role ADMIN).
   *
   * Atualiza os dados de um produto existente. Requer autenticação JWT e role ADMIN.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `atualizarProduto$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  atualizarProduto(params: AtualizarProduto$Params, context?: HttpContext): Observable<ComGestaoprodutosDtoProdutoDto> {
    return this.atualizarProduto$Response(params, context).pipe(
      map((r: StrictHttpResponse<ComGestaoprodutosDtoProdutoDto>): ComGestaoprodutosDtoProdutoDto => r.body)
    );
  }

  /** Path part for operation `excluirProduto()` */
  static readonly ExcluirProdutoPath = '/v1/produtos/{id}';

  /**
   * Excluir produto (exige role ADMIN).
   *
   * Exclui um produto do sistema. Requer autenticação JWT e role ADMIN.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `excluirProduto()` instead.
   *
   * This method doesn't expect any request body.
   */
  excluirProduto$Response(params: ExcluirProduto$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return excluirProduto(this.http, this.rootUrl, params, context);
  }

  /**
   * Excluir produto (exige role ADMIN).
   *
   * Exclui um produto do sistema. Requer autenticação JWT e role ADMIN.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `excluirProduto$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  excluirProduto(params: ExcluirProduto$Params, context?: HttpContext): Observable<void> {
    return this.excluirProduto$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `listarTodos()` */
  static readonly ListarTodosPath = '/v1/produtos';

  /**
   * Listar todos os produtos (disponível para USER e ADMIN).
   *
   * Retorna uma lista paginada de todos os produtos. Requer autenticação JWT e role USER ou ADMIN.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `listarTodos()` instead.
   *
   * This method doesn't expect any request body.
   */
  listarTodos$Response(params?: ListarTodos$Params, context?: HttpContext): Observable<StrictHttpResponse<OrgSpringframeworkDataDomainPageComGestaoprodutosDtoProdutoDto>> {
    return listarTodos(this.http, this.rootUrl, params, context);
  }

  /**
   * Listar todos os produtos (disponível para USER e ADMIN).
   *
   * Retorna uma lista paginada de todos os produtos. Requer autenticação JWT e role USER ou ADMIN.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `listarTodos$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  listarTodos(params?: ListarTodos$Params, context?: HttpContext): Observable<OrgSpringframeworkDataDomainPageComGestaoprodutosDtoProdutoDto> {
    return this.listarTodos$Response(params, context).pipe(
      map((r: StrictHttpResponse<OrgSpringframeworkDataDomainPageComGestaoprodutosDtoProdutoDto>): OrgSpringframeworkDataDomainPageComGestaoprodutosDtoProdutoDto => r.body)
    );
  }

  /** Path part for operation `criarProduto()` */
  static readonly CriarProdutoPath = '/v1/produtos';

  /**
   * Criar novo produto (exige role ADMIN).
   *
   * Cria um novo produto no sistema. Requer autenticação JWT e role ADMIN.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `criarProduto()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  criarProduto$Response(params: CriarProduto$Params, context?: HttpContext): Observable<StrictHttpResponse<ComGestaoprodutosDtoProdutoDto>> {
    return criarProduto(this.http, this.rootUrl, params, context);
  }

  /**
   * Criar novo produto (exige role ADMIN).
   *
   * Cria um novo produto no sistema. Requer autenticação JWT e role ADMIN.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `criarProduto$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  criarProduto(params: CriarProduto$Params, context?: HttpContext): Observable<ComGestaoprodutosDtoProdutoDto> {
    return this.criarProduto$Response(params, context).pipe(
      map((r: StrictHttpResponse<ComGestaoprodutosDtoProdutoDto>): ComGestaoprodutosDtoProdutoDto => r.body)
    );
  }

}
